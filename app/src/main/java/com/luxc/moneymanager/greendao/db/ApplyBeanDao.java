package com.luxc.moneymanager.greendao.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.luxc.moneymanager.entity.ApplyBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "APPLY_BEAN".
*/
public class ApplyBeanDao extends AbstractDao<ApplyBean, Long> {

    public static final String TABLENAME = "APPLY_BEAN";

    /**
     * Properties of entity ApplyBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ApplyId = new Property(0, Long.class, "applyId", true, "_id");
        public final static Property ApplyUserId = new Property(1, Long.class, "applyUserId", false, "APPLY_USER_ID");
        public final static Property ApplyUserName = new Property(2, String.class, "applyUserName", false, "APPLY_USER_NAME");
        public final static Property Status = new Property(3, int.class, "status", false, "STATUS");
    }


    public ApplyBeanDao(DaoConfig config) {
        super(config);
    }
    
    public ApplyBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"APPLY_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: applyId
                "\"APPLY_USER_ID\" INTEGER," + // 1: applyUserId
                "\"APPLY_USER_NAME\" TEXT," + // 2: applyUserName
                "\"STATUS\" INTEGER NOT NULL );"); // 3: status
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"APPLY_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ApplyBean entity) {
        stmt.clearBindings();
 
        Long applyId = entity.getApplyId();
        if (applyId != null) {
            stmt.bindLong(1, applyId);
        }
 
        Long applyUserId = entity.getApplyUserId();
        if (applyUserId != null) {
            stmt.bindLong(2, applyUserId);
        }
 
        String applyUserName = entity.getApplyUserName();
        if (applyUserName != null) {
            stmt.bindString(3, applyUserName);
        }
        stmt.bindLong(4, entity.getStatus());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ApplyBean entity) {
        stmt.clearBindings();
 
        Long applyId = entity.getApplyId();
        if (applyId != null) {
            stmt.bindLong(1, applyId);
        }
 
        Long applyUserId = entity.getApplyUserId();
        if (applyUserId != null) {
            stmt.bindLong(2, applyUserId);
        }
 
        String applyUserName = entity.getApplyUserName();
        if (applyUserName != null) {
            stmt.bindString(3, applyUserName);
        }
        stmt.bindLong(4, entity.getStatus());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ApplyBean readEntity(Cursor cursor, int offset) {
        ApplyBean entity = new ApplyBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // applyId
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // applyUserId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // applyUserName
            cursor.getInt(offset + 3) // status
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ApplyBean entity, int offset) {
        entity.setApplyId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setApplyUserId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setApplyUserName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStatus(cursor.getInt(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ApplyBean entity, long rowId) {
        entity.setApplyId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ApplyBean entity) {
        if(entity != null) {
            return entity.getApplyId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ApplyBean entity) {
        return entity.getApplyId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
