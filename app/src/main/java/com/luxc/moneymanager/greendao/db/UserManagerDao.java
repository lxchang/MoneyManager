package com.luxc.moneymanager.greendao.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.luxc.moneymanager.entity.propertyconverter.BeanConverter;
import java.util.List;

import com.luxc.moneymanager.entity.UserManager;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_MANAGER".
*/
public class UserManagerDao extends AbstractDao<UserManager, Void> {

    public static final String TABLENAME = "USER_MANAGER";

    /**
     * Properties of entity UserManager.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property UserList = new Property(0, String.class, "userList", false, "USER_LIST");
    }

    private final BeanConverter userListConverter = new BeanConverter();

    public UserManagerDao(DaoConfig config) {
        super(config);
    }
    
    public UserManagerDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_MANAGER\" (" + //
                "\"USER_LIST\" TEXT);"); // 0: userList
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_MANAGER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserManager entity) {
        stmt.clearBindings();
 
        List userList = entity.getUserList();
        if (userList != null) {
            stmt.bindString(1, userListConverter.convertToDatabaseValue(userList));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserManager entity) {
        stmt.clearBindings();
 
        List userList = entity.getUserList();
        if (userList != null) {
            stmt.bindString(1, userListConverter.convertToDatabaseValue(userList));
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public UserManager readEntity(Cursor cursor, int offset) {
        UserManager entity = new UserManager( //
            cursor.isNull(offset + 0) ? null : userListConverter.convertToEntityProperty(cursor.getString(offset + 0)) // userList
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserManager entity, int offset) {
        entity.setUserList(cursor.isNull(offset + 0) ? null : userListConverter.convertToEntityProperty(cursor.getString(offset + 0)));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(UserManager entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(UserManager entity) {
        return null;
    }

    @Override
    public boolean hasKey(UserManager entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
