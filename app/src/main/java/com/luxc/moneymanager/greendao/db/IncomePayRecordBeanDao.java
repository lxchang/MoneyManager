package com.luxc.moneymanager.greendao.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.luxc.moneymanager.entity.IncomePayRecordBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "INCOME_PAY_RECORD_BEAN".
*/
public class IncomePayRecordBeanDao extends AbstractDao<IncomePayRecordBean, Long> {

    public static final String TABLENAME = "INCOME_PAY_RECORD_BEAN";

    /**
     * Properties of entity IncomePayRecordBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Type = new Property(1, int.class, "type", false, "TYPE");
        public final static Property Time = new Property(2, String.class, "time", false, "TIME");
        public final static Property UserId = new Property(3, Long.class, "userId", false, "USER_ID");
        public final static Property User = new Property(4, String.class, "user", false, "USER");
        public final static Property Money = new Property(5, String.class, "money", false, "MONEY");
        public final static Property Title = new Property(6, String.class, "title", false, "TITLE");
        public final static Property Description = new Property(7, String.class, "description", false, "DESCRIPTION");
    }


    public IncomePayRecordBeanDao(DaoConfig config) {
        super(config);
    }
    
    public IncomePayRecordBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"INCOME_PAY_RECORD_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TYPE\" INTEGER NOT NULL ," + // 1: type
                "\"TIME\" TEXT," + // 2: time
                "\"USER_ID\" INTEGER," + // 3: userId
                "\"USER\" TEXT," + // 4: user
                "\"MONEY\" TEXT," + // 5: money
                "\"TITLE\" TEXT," + // 6: title
                "\"DESCRIPTION\" TEXT);"); // 7: description
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"INCOME_PAY_RECORD_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, IncomePayRecordBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getType());
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(3, time);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(4, userId);
        }
 
        String user = entity.getUser();
        if (user != null) {
            stmt.bindString(5, user);
        }
 
        String money = entity.getMoney();
        if (money != null) {
            stmt.bindString(6, money);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(7, title);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(8, description);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, IncomePayRecordBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getType());
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(3, time);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(4, userId);
        }
 
        String user = entity.getUser();
        if (user != null) {
            stmt.bindString(5, user);
        }
 
        String money = entity.getMoney();
        if (money != null) {
            stmt.bindString(6, money);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(7, title);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(8, description);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public IncomePayRecordBean readEntity(Cursor cursor, int offset) {
        IncomePayRecordBean entity = new IncomePayRecordBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // type
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // time
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // userId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // user
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // money
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // title
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // description
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, IncomePayRecordBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setType(cursor.getInt(offset + 1));
        entity.setTime(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUserId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setUser(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMoney(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTitle(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDescription(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(IncomePayRecordBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(IncomePayRecordBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(IncomePayRecordBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
